#!/bin/bash
# prepare-ciel - Script to run CIEL! unattendedly

# global variables
CIEL_ROOT=${CIEL_ROOT:$PWD}
TARGET_BRANCH=${TARGET_BRANCH}
PACKAGES=()
BATCHID=$BATCHID
RESUME=
CIEL_INSTANCE=${CIEL_INSTANCE:-stable}

# Colors
# It is a shame that Win32 Consoles does not have ANSI Escape code support - until Windows 10.
tb="\033[1m"	# Bold text
cW="\033[37m"	# White color
ci="\033[36m"	# Color for INFO (cyan)
cw="\033[33m"	# Color for WARN (yellow)
ce="\033[31m"	# Color for ERR! (red)
cm="\033[0m"	# Everything become normal

# If output is not a terminal, we disable colors
if ! [ -t 1 ] ; then
	tb=
	cW=
	ci=
	cw=
	ce=
	cm=
fi

# Logging helpers
i() {
	echo -e "$tb[${ci}INFO${cW}]: $@$cm"
}

warn() {
	echo -e "$tb[${cw}WARN${cW}]: $@$cm"
}

e() {
	echo -e "$tb[${ce}ERR!${cW}]: $@$cm"
}

bail() {
	e "$@"
	exit 1
}	

detect_ciel() {
	# Simulate ciel's behavior (but half of it)
	# Search for .ciel directory for the entire path, recursively. (Luckily enough Bash functions can be recursive.)
	local _path
	if [ "$1" ] ; then
		_path=$1
	else
		_path=$PWD
	fi

	if [ -e "$_path/.ciel" ] ; then
		CIEL_ROOT=$_path
		return 0
	elif [ "$_path" == "/" ] ; then
		e "Unable to detect ciel workspace: Hit the filesystem ceiling!"
		exit 1
	else
		detect_ciel "$(realpath $_path/../)"
	fi
}

if [ $# == "0" ] ; then
	if [ ! "$BATCHID" ] ; then
		e "You must specify at least one package to build."
		bail "If you are resuming from an existing session, specify an BATCHID."
	fi
fi

detect_ciel $CIEL_ROOT
i "Detected Ciel workspace: $CIEL_ROOT"

# Try to verify Ciel workspace status
cd $CIEL_ROOT
ninstances="$(ciel list &>1 | wc -l)"
if [ "$(($ninstances - 1))" == "0" -o "$?" != "0" ] ; then
	bail "Please set up your Ciel workspace first"
fi

# Try to access Git tree
cd $CIEL_ROOT/TREE
git status > /dev/null
if [ "$?" != "0" ] ; then
	e "Can not access the Git tree under $CIEL_ROOT/TREE."
	bail "Make sure you are running this script with CORRECT user."
fi

# Fill $TARGET_BRANCH
if ! [ "$TARGET_BRANCH" ] ; then
		cd $CIEL_ROOT/TREE
		TARGET_BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi
if [ "$TARGET_BRANCH" == "HEAD" ] ; then
	# Where you at?
	e "This tree must be at an branch, not a commit or tag."
	bail "This tree seems in a dangling state - Please manually specify target branch with TARGET_BRANCH variable."
fi

if [ "$BATCHID" ] ; then
	# Do not destroy the previous work
	NOCLEAN=1
fi

# Clean
if ! [ "$NOCLEAN" ] ; then
	i "Cleaning Ciel OUTPUT directories under $CIEL_ROOT..."
	cd $CIEL_ROOT
	for i in `find $CIEL_ROOT -maxdepth 1 -type d -name 'OUTPUT*' -printf '%P\n'` ; do
		i "Removing OUTPUT directory $i..."
		sudo rm -rv $i
	done

	i "Cleaning Git Tree..."
	cd $CIEL_ROOT/TREE
	git clean -dxf
fi

# Update Git Tree
if ! [ "$NOUPDATE" ] ; then
	i "Updating Git tree at $CIEL_ROOT/TREE..."
	cd $CIEL_ROOT/TREE
	git fetch
	git checkout $TARGET_BRANCH > /dev/null
	if [ "$?" != "0" ] ; then
		bail "Can not checkout to branch '$TARGET_BRANCH'."
	fi
	git pull --rebase
	if [ "$?" != "0" ] ; then
		bail "Unable to update target branch $TARGET_BRANCH."
	fi
fi

i "Preparing Ciel..."
i "Updating OS Container..."
if ! [ "$NOOSUPDATE" ] ; then
	cd $CIEL_ROOT
	sudo ciel update-os
	[ "$?" != "0" ] && bail "Unable to update container OS."
fi

i "Rolling back container..."
if ! [ "$NOROLLBACK" ] ; then
	cd $CIEL_ROOT
	sudo ciel rollback
fi

# Record the packages list
# TODO handle groups - finished
if [ ! "$BATCHID" ] ; then
	i "Checking packages..."
	echo -n "Packages: "
	for i in "$@" ; do
		if [[ "$i" == groups/* ]] ; then
			# Expand the groups
			i "\nExpanding group $i..."
			echo -n "$i: "
			for j in `cat $CIEL_ROOT/TREE/$i` ; do
				_package=("${j/#*\//}")
				echo -n "$_package "
				PACKAGES+=($_package)
			done
			echo -en "\nPackages: "
		else
			echo -n "$i "
			PACKAGES+=("$i")
		fi
	done
else
	if [ "$#" -gt 0 ] ; then
		warn "You specified both BATCHID and packages. Packages specified later will be ignored."
	fi
fi
echo ""
i "Preparing to build..."
# TODO Add resume functionality
# BATCHID has enough information
if [ ! "$BATCHID" ] ; then
	# Generate one
	_rand="$(openssl rand 5 | base32)"
	_rand=${_rand,,}
	BATCHID="$(date '+%Y%m%d%H%M')-$_rand"
	i "BatchID = $BATCHID"
else
	i "Trying to resume from previous session..."
	if [ ! -e "$CIEL_ROOT/ci-builds/$BATCHID" -o \
		! -e "$CIEL_ROOT/ci-builds/$BATCHID/status" -o \
		! -e "$CIEL_ROOT/ci-builds/$BATCHID/list" ] ; then
		e "There is no such session with batch ID '$BATCHID' found in this Ciel workspace."
		bail "Make sure you are using the correct Ciel workspace, and the batch ID does exist."
	fi
	_curpkg="$(cat $CIEL_ROOT/ci-builds/$BATCHID/status)"
	_list="$(cat $CIEL_ROOT/ci-builds/$BATCHID/list)"
	_found=0
	if [ "$_curpkg" == "success" ] ; then
		i "This batch was successfully built! Exiting."
		i "If this was a mistake, please modify the status file to the package you want to build."
		exit 0
	fi
	for i in $_list ; do
		if [ "$i" == "$_curpkg" ] ; then
			_found=1
		fi
		if [ $_found == "1" ] ; then
			PACKAGES+=($i)
		fi
	done
	RESUME=$BATCHID
	i "Recovered list of packages: ${PACKAGES[@]}"
	i "Last packages build attempt: $_curpkg"
fi

# Create list and status file
sudo mkdir -pv $CIEL_ROOT/ci-builds/$BATCHID
statfile="$CIEL_ROOT/ci-builds/$BATCHID/status"
listfile="$CIEL_ROOT/ci-builds/$BATCHID/list"

i "Updating status..."
sudo touch $CIEL_ROOT/ci-builds/batches
sudo touch $CIEL_ROOT/ci-builds/latest-id
echo $BATCHID | sudo tee -a $CIEL_ROOT/ci-builds/batches > /dev/null
echo $BATCHID | sudo tee $CIEL_ROOT/ci-builds/latest-id > /dev/null

if [ ! $RESUME ] ; then
	i "Creating list and status file..."
	sudo touch $statfile || bail "Unable to create status file."
	sudo touch $listfile || bail "Unable to create list file."
	echo "${PACKAGES[@]}" | sudo tee $listfile > /dev/null
fi

for i in ${PACKAGES[@]} ; do
	i "Building $i..."
	echo "$i" | sudo tee $statfile > /dev/null
	_LANG=$LANG
	export LANG=C
	safename=${i/\//_}
	sudo script -qc "ciel build -i $CIEL_INSTANCE $i" $CIEL_ROOT/ci-builds/$BATCHID/$safename.log
	if [ "$?" != "0" ] ; then
		export LANG=$_LANG
		e "Error building package $i ^o^"
		e "Please checkout the log $CIEL_ROOT/ci-builds/$BATCHID/$i.log for details."
		bail "Can not continue. Bailing out."
	fi
done
export LANG=$_LANG

i "Done! ${#PACKAGES} packages built"
echo "success" | sudo tee $statfile > /dev/null

# TODO copy build artifacts (OUTPUT-$TARGET_BRANCH directory) to ci-builds/$BATCHID

unset _rand _curpkg _pkglist CIEL_ROOT RESUME PACKAGES TARGET_BRANCH statfile listfile
