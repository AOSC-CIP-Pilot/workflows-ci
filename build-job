#!/bin/bash
# build-job - use a ciel workspace to build packages

# global variables - can be specified outside of the script
# Ciel workspace
CIEL_WORKSPACE_DIR=${CIEL_WORKSPACE_DIR:-$PWD}
# Batch ID (if resuming from a previous session, or pre-defined)
BATCHID=$BATCHID
# Ciel instance to use for build
CIEL_INSTANCE=${CIEL_INSTANCE:-main}
# Artifact output directory
ARTIFACT_OUT_DIR=${ARTIFACT_OUT_DIR}

# The following variables can not be specified
PACKAGES=()
# Used to let the script know we are resuming
RESUME=
# Status
STATUS=fail

if [ ! -e "$PWD"/data/tracked-packages ] ; then
	echo "Unable to find the tracked packages file."
	echo "This script should be run at the root directory of workflows-ci repository."
	exit
fi

source common/utils.bash

set -e
set -o pipefail

save_artifacts() {
	i "Copying artifacts..."
	echo "$CIEL_WORKSPACE_DIR/OUTPUT-$TARGET_BRANCH"
	ls "$CIEL_WORKSPACE_DIR/OUTPUT-$TARGET_BRANCH"
	if [ ! -e $CIEL_WORKSPACE_DIR/OUTPUT-$TARGET_BRANCH ] ; then
		bail "Cannot locate the corresponding OUTPUT directory, exiting."
	else
		cd $CIEL_WORKSPACE_DIR/OUTPUT-$TARGET_BRANCH
		find . -type f -exec install -Dvm644 {} $ARTIFACT_OUT_DIR/{} \;
	fi
	
	i "Copying logs..."
	cd $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID
	find -maxdepth 1 -type f -exec install -Dvm644 {} $ARTIFACT_OUT_DIR/logs/{} \;
	
	i "Job finished successfully!"
	i "Ciel workspace: $CIEL_WORKSPACE_DIR"
	i "Batch ID: $BATCHID"
	i "CI log directory: $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID"
	i "Artifact output directory: $ARTIFACT_OUT_DIR"
	i "Exporting info..."
	echo "ARTIFACT_DIR=$ARTIFACT_OUT_DIR" | tee -a "$GITHUB_OUTPUT"
	echo "STATUS=$STATUS" | tee -a "$GITHUB_OUTPUT"

	unset _rand _curpkg _pkglist CIEL_WORKSPACE_DIR RESUME PACKAGES TARGET_BRANCH statfile listfile
}

detect_ciel() {
	# Simulate ciel's behavior (but half of it)
	# Search for .ciel directory for the entire path, recursively. (Luckily enough Bash functions can be recursive.)
	local _path
	if [ "$1" ] ; then
		_path=$1
	else
		_path=$PWD
	fi

	if [ -e "$_path/.ciel" ] ; then
		CIEL_WORKSPACE_DIR=$_path
		return 0
	elif [ "$_path" == "/" ] ; then
		e "Unable to detect ciel workspace: Hit the filesystem ceiling!"
		exit 1
	else
		detect_ciel "$(realpath $_path/../)"
	fi
}

if [ $# == "0" ] ; then
	if [ ! "$BATCHID" ] ; then
		e "You must specify at least one package to build."
		bail "If you are resuming from an existing session, specify an BATCHID."
	fi
fi

detect_ciel $CIEL_WORKSPACE_DIR
i "Detected Ciel workspace: $CIEL_WORKSPACE_DIR"

# Try to verify Ciel workspace status
cd $CIEL_WORKSPACE_DIR
ninstances="$(sudo ciel list 2>&1 | wc -l)"
if [ "$(($ninstances - 1))" == "0" -o "$?" != "0" ] ; then
	bail "Please set up your Ciel workspace first"
fi

# Fill $TARGET_BRANCH
if ! [ "$TARGET_BRANCH" ] ; then
		cd $CIEL_WORKSPACE_DIR/TREE
		TARGET_BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi
if [ "$TARGET_BRANCH" == "HEAD" ] ; then
	# Where you at?
	e "This tree must be at an branch, not a commit or tag."
	bail "This tree seems in a dangling state - Please manually specify target branch with TARGET_BRANCH variable."
fi

if [ "$BATCHID" ] ; then
	# Do not destroy the previous work
	NOCLEAN=1
fi

# Record the packages list
# TODO handle groups - finished
i "Checking packages..."
echo -n "Packages: "
for i in "$@" ; do
	if [[ "$i" == groups/* ]] ; then
		# Expand the groups
		i "\nExpanding group $i..."
		echo -n "$i: "
		for j in `cat $CIEL_WORKSPACE_DIR/TREE/$i` ; do
			_package=("${j/#*\//}")
			echo -n "$_package "
			PACKAGES+=($_package)
		done
		echo -en "\nPackages: "
	else
		echo -n "$i "
		PACKAGES+=("$i")
	fi
done
echo ""
i "Preparing to build..."
# TODO Add resume functionality
# BATCHID has enough information
if [ ! "$BATCHID" ] ; then
	# Generate one
	_rand="$(openssl rand 5 | base32)"
	_rand=${_rand,,}
	BATCHID="$(date '+%Y%m%d%H%M')-$_rand"
	i "BatchID = $BATCHID"
else
	if [ ! -e "$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID" -o \
		! -e "$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/status" -o \
		! -e "$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/list" ] ; then
		i "There is no such session with batch ID '$BATCHID' found in this Ciel workspace."
		i "Starting over."
	else
		i "Trying to resume from previous session..."
		warn "You specified both of the BATCHID and packages. Packages will be ignored."
		PACKAGES=()
		_curpkg="$(cat $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/status)"
		_list="$(cat $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/list)"
		_found=0
		if [ "$_curpkg" == "success" ] ; then
			i "This batch was successfully built! Exiting."
			i "If this was a mistake, please modify the status file to the package you want to build."
			exit 0
		fi
		for i in $_list ; do
			if [ "$i" == "$_curpkg" ] ; then
				_found=1
			fi
			if [ $_found == "1" ] ; then
				PACKAGES+=($i)
			fi
		done
		RESUME=$BATCHID
		i "Recovered list of packages: ${PACKAGES[@]}"
		i "Last packages build attempt: $_curpkg"
	fi
fi

i "Creating artifact output directory..."
if [ ! "$ARTIFACT_OUT_DIR" ] ; then
	ARTIFACT_OUT_DIR=$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/out
fi
mkdir -pv $ARTIFACT_OUT_DIR || bail "Can not create artifact output directory."
ln -sfv $ARTIFACT_OUT_DIR $CIEL_WORKSPACE_DIR/ci-builds/latest-out || bail "Can not create link to the artifact out directory."
touch $ARTIFACT_OUT_DIR/batchid || bail "Can not create files in the artifact output directory."
echo $BATCHID | tee $ARTIFACT_OUT_DIR/batchid > /dev/null || bail "Can not write to the files in the artifact output directory."

# Create list and status file
mkdir -pv $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID
statfile="$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/status"
listfile="$CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/list"

i "Updating status..."
touch $CIEL_WORKSPACE_DIR/ci-builds/batches
touch $CIEL_WORKSPACE_DIR/ci-builds/latest-id
ln -sfv $BATCHID $CIEL_WORKSPACE_DIR/ci-builds/latest
echo $BATCHID | tee -a $CIEL_WORKSPACE_DIR/ci-builds/batches > /dev/null
echo $BATCHID | tee $CIEL_WORKSPACE_DIR/ci-builds/latest-id > /dev/null

if [ ! $RESUME ] ; then
	i "Creating list and status file..."
	touch $statfile || bail "Unable to create status file."
	touch $listfile || bail "Unable to create list file."
	echo "${PACKAGES[@]}" | tee $listfile > /dev/null
fi

trap save_artifacts EXIT

i "Entering $CIEL_WORKSPACE_DIR..."
cd $CIEL_WORKSPACE_DIR
cnt=0
for i in ${PACKAGES[@]} ; do
	i "Building $i..."
	echo "$i" | tee $statfile > /dev/null
	_LANG=$LANG
	export LANG=C
	safename=${i/\//_}
	script -eqc "sudo LANG=C ciel build -i $CIEL_INSTANCE $i" $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/$safename.log
	if [ "$?" != "0" ] ; then
		STATUS=fail
		export LANG=$_LANG
		e "Error building package $i ^o^"
		e "Please checkout the log $CIEL_WORKSPACE_DIR/ci-builds/$BATCHID/$i.log for details."
		break
	fi
	cnt=$(($cnt + 1))
done
export LANG=$_LANG
if [ "$cnt" == ${#PACKAGES[@]} ] ; then
	i "Done! ${#PACKAGES[@]} packages built"
	STATUS=success
	echo "success" | tee $statfile > /dev/null
else
	e "Some of the packages has failed."
fi
exit 0
