#!/bin/bash

# check-update-job: Check for updates

NIGHTLY=0

TREEDIR=${TREEDIR:-$PWD}

UPSTREAM_ABBS_URL=${UPSTREAM_ABBS_URL:-"https://github.com/AOSC-Dev/aosc-os-abbs"}

BRANCH_TO_REBASE=${BRANCH_TO_REBASE:-"stable"}

NOCONFIG_GIT=0

if [ ! -e "$PWD"/data/tracked-packages ] ; then
	echo "Unable to find the tracked packages file."
	echo "This script should be run at the root directory of workflows-ci repository."
	exit
fi

ROOT=$PWD
source common/utils.bash

pushd $TREEDIR

BRANCH=bleeding-edge

if [ "$NIGHTLY" == "1" ] ; then
	BRANCH=bleeding-edge-nightly
fi

# Is it a git repository?
git status > /dev/null
if [ "$?" != "0" ] ; then
	e "The specified path is not a Git tree - make sure the path you specified is corret."
	bail "Unable to run 'git status'."
fi

if [ "$NOCONFIG_GIT" == "0" ] ; then
	i "Configuring git..."
	git config user.name "AOSC CIP CI"
	git config user.email "cip-ci@aosc.io"
fi

i "Configuring acbs..."
sudo cp /etc/acbs/forest.conf /etc/acbs/forest.conf.bak
echo -e "[default]\nlocation = $(realpath $TREEDIR)" | sudo tee /etc/acbs/forest.conf

i "Checking out to branch $BRANCH..."
git checkout $BRANCH

i "Cleaning..."
git checkout --force $BRANCH
git reset --hard origin/$BRANCH

i "Fetching $UPSTREAM_ABBS_URL..."
git remote add upstream $UPSTREAM_ABBS_URL
git fetch upstream || bail "Unable to fetch upstream."

i "Rebasing to Upstream branch $BRANCH_TO_REBASE..."
git pull upstream $BRANCH_TO_REBASE
if [ "$?" != "0" ] ; then
	e "Looks like there are some conflicts during rebase."
	bail "Failed to rebase to upstream branch $BRANCH_TO_REBASE. Manual intervention required."
fi

CHANGED=()

i "Checking for updates..."
for i in `cat $ROOT/data/tracked-packages` ; do
	i "Checking $i..."
	pushd $i
	aosc-findupdate
	# TODO handle nightly updates
	if ! git diff --quiet . ; then
		i "Updating source checksums..."
		sudo acbs-build -gw "${i/#*\//}"
		CHANGED+=("$i")
	fi
	popd
done

i "Let's see if there's any changes..."
if ! git diff --quiet ; then
	# There are changes
	i "Okay, we have ${#CHANGED[@]} change(s) to commit."
	echo "${CHANGED[@]}"
	for i in ${CHANGED[@]} ; do
		i "Commiting $i..."
		pushd $i
		git add .
		source ./spec
		git commit -m "${i/#*\//}: update to $VER"
		popd
	done
else
	i "Nothing to commit, exiting peacefully."
fi
